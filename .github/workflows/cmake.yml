name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXPORT_COMPILE_COMMANDS: true

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Checkout pico-sdk
      uses: actions/checkout@v3
      with:
        repository: raspberrypi/pico-sdk
        path: pico-sdk
        submodules: true
      
    - name: Get Cmake
      uses: lukka/get-cmake@latest
    
    - name: Get ARM GCC Compiler
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      id: arm-none-eabi-gcc-action

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk -DCMAKE_EXPORT_COMPILE_COMMANDS=${{env.EXPORT_COMPILE_COMMANDS}} -DCMAKE_C_COMPILER=${{ steps.arm-none-eabi-gcc-action.outputs.path }}/arm-none-eabi-gcc   -DCMAKE_CXX_COMPILER=${{ steps.arm-none-eabi-gcc-action.outputs.path }}/arm-none-eabi-g++ -G "Unix Makefiles" 

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
